name: Test and Compile with Custom Scripts

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  test-and-build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
          - os: macos-latest
            arch: x64
    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      # Step 4: Determine Architecture
      - name: Detect Architecture
        run: echo "Running on $RUNNER_OS with architecture $RUNNER_ARCH"
        shell: bash

      # Step 5: Execute Compilation Script
      - name: Run Compilation Script
        shell: bash
        run: |
          OUTPUT_DIR="distworkflow/${{ matrix.os }}/${{ matrix.arch }}"
          mkdir -p "$OUTPUT_DIR"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "Compiling for Windows (${RUNNER_ARCH})..."
            pyinstaller main.py --distpath "$OUTPUT_DIR" --onefile --icon="./icon.ico" --name="cipheros"
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "Compiling for Linux (${RUNNER_ARCH})..."
            pyinstaller main.py --distpath "$OUTPUT_DIR" --onefile --icon="./icon.ico" --name="cipheros"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "Compiling for macOS (${RUNNER_ARCH})..."
            pyinstaller main.py --distpath "$OUTPUT_DIR" --onefile --icon="./icon.ico" --name="cipheros"
          fi

      # Step 6: Test Initialization
      - name: Test Initialization
        shell: bash
        run: |
          EXECUTABLE="distworkflow/${{ matrix.os }}/${{ matrix.arch }}/cipheros"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXECUTABLE="${EXECUTABLE}.exe"
          fi

          if [[ ! -f "$EXECUTABLE" ]]; then
            echo "Error: Compiled executable not found!"
            exit 1
          fi

          $EXECUTABLE --debug || (echo "Error: Program failed during initialization!" && exit 1)

      # Step 7: Upload Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.os }}-${{ matrix.arch }}-build"
          path: "distworkflow/${{ matrix.os }}/${{ matrix.arch }}"

      # Step 8: Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Step 9: Merge Changes
      - name: Fetch and Merge Changes
        run: |
          git fetch origin
          git merge origin/main

      # Step 10: Commit Changes
      - name: Add and Commit Changes
        run: |
          git add distworkflow/
          git commit -m "Add compiled binaries for ${{ matrix.os }} (${{ matrix.arch }})" || echo "No changes to commit."

      # Step 11: Push Changes
      - name: Push Changes
        run: git push origin main
      

