name: Test and Compile with Custom Scripts

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  test-and-build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # Run on all platforms
    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install PyInstaller
      - name: Install pyinstaller
        run: pip install pyinstaller

      # Step 4: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 5: Execute Compilation Script based on OS
      - name: Run Compilation Script
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "Compiling for Windows..."
            pyinstaller main.py --distpath distworkflow/${{ matrix.os }}/ --hidden-import=yaml --hidden-import=yaml --exclude-module=pygame --exclude-module=PyQt5 --exclude-module=PySide6 --onefile --icon="./icon.ico" --name="cipheros"
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "Compiling for Linux..."
            pyinstaller main.py --distpath distworkflow/${{ matrix.os }}/ --hidden-import=yaml --hidden-import=yaml --exclude-module=pygame --exclude-module=PyQt5 --exclude-module=PySide6 --onefile --icon="./icon.ico" --name="cipheros"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "Compiling for macOS..."
            pyinstaller main.py --distpath distworkflow/${{ matrix.os }}/ --hidden-import=yaml --hidden-import=yaml --exclude-module=pygame --exclude-module=PyQt5 --exclude-module=PySide6 --onefile --icon="./icon.ico" --name="cipheros"
          fi

      # Step 6: Test Initialization of Compiled Executable
      - name: Test Initialization
        run: |
            if ($env:RUNNER_OS -eq "Windows") {
              $EXECUTABLE = ".\distworkflow\windows-latest\cipheros.exe"
              if (-Not (Test-Path $EXECUTABLE)) {
                Write-Error "Error: Compiled executable not found!"
                exit 1
              }
              & $EXECUTABLE --debug
              if ($LASTEXITCODE -ne 0) {
                Write-Error "Error: Program failed during initialization!"
                exit 1
              }
            }
        shell: pwsh
        if: runner.os == 'Windows'
        
      - name: Test Initialization
        run: |
          EXECUTABLE="./distworkflow/${{ matrix.os }}/cipheros"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXECUTABLE="${EXECUTABLE}.exe"
          fi
      
          # Check if executable exists
          if [[ ! -f "$EXECUTABLE" ]]; then
            echo "Error: Compiled executable not found!"
            exit 1
          fi
      
          # Run the executable with --debug to test initialization
          $EXECUTABLE --debug || (echo "Error: Program failed during initialization!" && exit 1)
        shell: bash
        if: runner.os != 'Windows'


      # Step 7: Upload Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-build
          path: distworkflow/${{ matrix.os }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Fetch Latest Changes
        run: git fetch origin
      
      - name: Merge Latest Changes
        run: git merge origin/main
      
      - name: Add and Commit Changes
        run: |
          git add dist/
          git commit -m "Add compiled binaries for ${{ matrix.os }}" || echo "No changes to commit."
      
      - name: Push Changes
        run: git push origin main
      

